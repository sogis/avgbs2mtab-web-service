buildscript {
    ext {
        springBootVersion = '2.1.2.RELEASE'
    }
    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }		
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id "com.bmuschko.docker-remote-api" version "3.6.1"
    id "org.ajoberstar.grgit" version "3.0.0"
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'eclipse'
apply plugin: "com.bmuschko.docker-remote-api"

group = 'ch.so.agi.avgbs2mtab'

description = """avgbs2mtab web service"""

bootJar {
    launchScript()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    jcenter()
    maven { url "http://jars.interlis.ch/" }
    maven { url "http://repo.maven.apache.org/maven2" }
}


dependencies {
    compile project(':library')
    compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}")
    runtime("org.springframework.boot:spring-boot-devtools:${springBootVersion}")
    runtime("org.springframework.boot:spring-boot-actuator:${springBootVersion}")
    compile("org.webjars:materializecss:0.100.1")
    compile("org.webjars:jquery:2.2.4")
    compile("commons-io:commons-io:2.6")
    compile("ch.interlis:ilivalidator:1.9.3")
    compile("io.rest-assured:rest-assured:3.2.0")
    testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}") {
        exclude(module: 'commons-logging')
    }		
}

test {
    testLogging {
        showStandardStreams = true
    }
}

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

docker {
    registryCredentials {
        username = System.env.dockerRegistryUser
        password = System.env.dockerRegistryPass
    }
}

task buildDockerImage(type: DockerBuildImage) {
    description = "Build docker image."
    inputDir = project.projectDir
    tags = ["sogis/avgbs2mtab-web-service:"+ version, "sogis/avgbs2mtab-web-service:latest"]
    labels = ["avgbs2mtab-web-service.created": new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()), 
            "avgbs2mtab-web-service.git_commit": Grgit.open(dir: '.').head().id, 
            "avgbs2mtab-web-service.travis_build": version]    
}

task pushDockerImage_One(dependsOn: 'buildDockerImage', type: DockerPushImage) {
    description = "Push docker image to hub.docker.com (images are UNTESTED)."
    imageName = buildDockerImage.tags[0]
}

task pushDockerImage_Two(dependsOn: 'buildDockerImage', type: DockerPushImage) {
    description = "Push docker image to hub.docker.com (images are UNTESTED)."
    imageName = buildDockerImage.tags[1]
}

task pushDockerImages() {
    description = "Collect all push images tasks."
}

pushDockerImages.dependsOn {
    tasks.findAll { task -> task.name.startsWith('pushDockerImage_') }
}

import java.text.SimpleDateFormat
import org.ajoberstar.grgit.Grgit

task versionTxt()  {
    doLast {
        new File("version.txt").text = """
Version: $version
Revision: ${Grgit.open(dir: '.').head().id}
Buildtime: ${new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date())}
Application-name: avgbs2mtab-web-service
"""
    }
}
task copyVersionTxt(type: Copy) {
    from "../version.txt"
    into "src/main/resources/templates/"
}
copyVersionTxt.dependsOn(versionTxt)
build.dependsOn(copyVersionTxt)
classes.dependsOn(copyVersionTxt)
