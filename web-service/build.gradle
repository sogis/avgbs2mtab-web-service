plugins {
    id 'org.springframework.boot' version '2.7.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'org.springframework.experimental.aot' version '0.12.0'
}

group = 'ch.so.agi.avgbs2mtab'
description = """avgbs2mtab web service"""

sourceCompatibility = 17
targetCompatibility = 17

compileJava {
    options.compilerArgs.addAll(['--release', '17'])
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

bootJar {
   archiveName = baseName + "-" + version + "-exec.jar"
}

repositories {
    maven { url 'https://repo.spring.io/release' }
    mavenCentral()
    maven { url "https://jars.interlis.ch/" }
}

// TODO:
// Force dependencies version.

dependencies {
    implementation project(':library')
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation "org.webjars:materializecss:0.100.1"
    implementation "org.webjars:jquery:2.2.4"
    implementation "commons-io:commons-io:2.11.0"
    implementation "ch.interlis:ilivalidator:1.11.13"
    
    // Weil sonst @TypeHint das Package nicht findet. Es ist eine transitive Abhängigkeit von Apache POI.
    //implementation "org.apache.xmlbeans:xmlbeans:3.1.0" 

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation ("io.rest-assured:rest-assured:5.1.1") {
        exclude(module: 'groovy')
        exclude(module: 'groovy-xml')
    } 
    // https://github.com/rest-assured/rest-assured/wiki/FAQ
    // Version entspricht der Gradle-Groovy-Version. Problematisch
    // wirds wenn die Ansprüche von Rest Assured nicht mehr
    // mit der Gradle-Groovy-Version zusammenpassen.
    testImplementation 'org.codehaus.groovy:groovy-all:3.0.9' 
    
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
}

tasks.named('test') {
    useJUnitPlatform()
}

springAot {
    //mode = org.springframework.aot.gradle.dsl.AotMode.NATIVE_AGENT
    debugVerify = false
    removeXmlSupport = false
    removeYamlSupport = false
    removeJmxSupport = true
    verify = true
}

nativeBuild {
    verbose = true
    fallback = false
    buildArgs.add("--libc=musl")
    buildArgs.add("--static")
    buildArgs.add("-H:+AddAllCharsets") // native image kopiert nur einige wenige rein. Hier wird CP12-Gugus benötigt.
}

import java.text.SimpleDateFormat

def getCheckedOutGitCommitHash() {
    'git log -1 --pretty=%H'.execute().text.trim()
}

def getTimestamp() {
    def date = new Date()
    return date.format('yyyy-MM-dd HH:mm:ss')
}

task versionTxt()  {
    outputs.upToDateWhen { false }
    doLast {
        new File("version.txt").text = """
Version: $version
Revision: ${getCheckedOutGitCommitHash()}
Buildtime: ${getTimestamp()}
Application-name: avgbs2mtab-web-service
"""
    }
}
task copyVersionTxt(type: Copy) {
    from "../version.txt"
    into "src/main/resources/templates/"
}
copyVersionTxt.dependsOn(versionTxt)
build.dependsOn(copyVersionTxt)
classes.dependsOn(copyVersionTxt)